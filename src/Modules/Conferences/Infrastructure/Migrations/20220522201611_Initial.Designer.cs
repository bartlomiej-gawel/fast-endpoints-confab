// <auto-generated />
using System;
using Confab.Modules.Conferences.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Confab.Modules.Conferences.Infrastructure.Migrations
{
    [DbContext(typeof(ConferencesDbContext))]
    [Migration("20220522201611_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("conferences_module")
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Confab.Modules.Conferences.Domain.Conferences.Conference", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<Guid>("HostId")
                        .HasColumnType("uuid")
                        .HasColumnName("host_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("ParticipantsLimit")
                        .HasColumnType("integer")
                        .HasColumnName("participants_limit");

                    b.HasKey("Id");

                    b.HasIndex("HostId");

                    b.ToTable("conferences", "conferences_module");
                });

            modelBuilder.Entity("Confab.Modules.Conferences.Domain.Hosts.Host", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("hosts", "conferences_module");
                });

            modelBuilder.Entity("Confab.Modules.Conferences.Domain.Conferences.Conference", b =>
                {
                    b.HasOne("Confab.Modules.Conferences.Domain.Hosts.Host", null)
                        .WithMany("Conferences")
                        .HasForeignKey("HostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Confab.Modules.Conferences.Domain.Conferences.ValueObjects.ConferenceDate", "Date", b1 =>
                        {
                            b1.Property<Guid>("ConferenceId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("From")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("date_from");

                            b1.Property<DateTime>("To")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("date_to");

                            b1.HasKey("ConferenceId");

                            b1.ToTable("conferences", "conferences_module");

                            b1.WithOwner()
                                .HasForeignKey("ConferenceId");
                        });

                    b.OwnsOne("Confab.Modules.Conferences.Domain.Conferences.ValueObjects.ConferenceLocation", "Location", b1 =>
                        {
                            b1.Property<Guid>("ConferenceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("location_city");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("location_street");

                            b1.HasKey("ConferenceId");

                            b1.ToTable("conferences", "conferences_module");

                            b1.WithOwner()
                                .HasForeignKey("ConferenceId");
                        });

                    b.Navigation("Date")
                        .IsRequired();

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("Confab.Modules.Conferences.Domain.Hosts.Host", b =>
                {
                    b.Navigation("Conferences");
                });
#pragma warning restore 612, 618
        }
    }
}
